// <auto-generated />
using System;
using Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountAccountRole", b =>
                {
                    b.Property<Guid>("AccountsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountRolesAccountId")
                        .HasColumnType("uuid");

                    b.Property<int>("AccountRolesRoleId")
                        .HasColumnType("integer");

                    b.HasKey("AccountsId", "AccountRolesAccountId", "AccountRolesRoleId");

                    b.HasIndex("AccountRolesAccountId", "AccountRolesRoleId");

                    b.ToTable("AccountAccountRole");
                });

            modelBuilder.Entity("AccountRoleRole", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("AccountRolesAccountId")
                        .HasColumnType("uuid");

                    b.Property<int>("AccountRolesRoleId")
                        .HasColumnType("integer");

                    b.HasKey("RolesId", "AccountRolesAccountId", "AccountRolesRoleId");

                    b.HasIndex("AccountRolesAccountId", "AccountRolesRoleId");

                    b.ToTable("AccountRoleRole");
                });

            modelBuilder.Entity("HashtagPost", b =>
                {
                    b.Property<int>("HashtagsId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("uuid");

                    b.HasKey("HashtagsId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("HashtagPost");
                });

            modelBuilder.Entity("Infrastructur.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_confirmed");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("normalized_email");

                    b.HasKey("Id");

                    b.ToTable("account");
                });

            modelBuilder.Entity("Infrastructur.Models.AccountRole", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("AccountId", "RoleId");

                    b.ToTable("account_role");
                });

            modelBuilder.Entity("Infrastructur.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("IsBottomLevel")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bottom_level");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("text")
                        .HasColumnName("parent_category_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("category");
                });

            modelBuilder.Entity("Infrastructur.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_comment_id");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("Infrastructur.Models.ExternalAuthentication", b =>
                {
                    b.Property<int>("ProviderId")
                        .HasColumnType("integer")
                        .HasColumnName("provider_id");

                    b.Property<string>("AccountIdFromProvider")
                        .HasColumnType("text")
                        .HasColumnName("account_id_from_provider");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.HasKey("ProviderId", "AccountIdFromProvider");

                    b.HasIndex("AccountId");

                    b.ToTable("external_authentication");
                });

            modelBuilder.Entity("Infrastructur.Models.ExternalLoginProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("external_login_provider");
                });

            modelBuilder.Entity("Infrastructur.Models.Hashtag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("hashtag");
                });

            modelBuilder.Entity("Infrastructur.Models.LikedComment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid")
                        .HasColumnName("comment_id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("CommentId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("liked_comment");
                });

            modelBuilder.Entity("Infrastructur.Models.LikedPost", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("PostId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("liked_post");
                });

            modelBuilder.Entity("Infrastructur.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Cover")
                        .HasColumnType("text")
                        .HasColumnName("cover");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("post");
                });

            modelBuilder.Entity("Infrastructur.Models.PostSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.ToTable("PostSummary");
                });

            modelBuilder.Entity("Infrastructur.Models.PostWithMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Cover")
                        .HasColumnType("text")
                        .HasColumnName("cover");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.ToTable("PostWithMetadata");
                });

            modelBuilder.Entity("Infrastructur.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("role");
                });

            modelBuilder.Entity("Infrastructure.Models.CommentsLikes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("LikeCnt")
                        .HasColumnType("bigint")
                        .HasColumnName("like_cnt");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_comment_id");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.ToTable("get_comments_likes");
                });

            modelBuilder.Entity("Infrastructure.Models.CommentsLikesHasLiked", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("HasLiked")
                        .HasColumnType("boolean")
                        .HasColumnName("has_liked");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("LikeCnt")
                        .HasColumnType("bigint")
                        .HasColumnName("like_cnt");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_comment_id");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.ToTable("CommentsLikesHasLiked");
                });

            modelBuilder.Entity("Infrastructure.Models.PostLikes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Cover")
                        .HasColumnType("text")
                        .HasColumnName("cover");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<long>("LikeCnt")
                        .HasColumnType("bigint")
                        .HasColumnName("like_cnt");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.ToTable("get_post_likes");
                });

            modelBuilder.Entity("Infrastructure.Models.PostLikesHasLiked", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Cover")
                        .HasColumnType("text")
                        .HasColumnName("cover");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<bool>("HasLiked")
                        .HasColumnType("boolean")
                        .HasColumnName("has_liked");

                    b.Property<long>("LikeCnt")
                        .HasColumnType("bigint")
                        .HasColumnName("like_cnt");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.ToTable("get_post_likes_has_liked");
                });

            modelBuilder.Entity("Infrastructure.Models.PostsLikesComments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<long>("CommentCnt")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_cnt");

                    b.Property<string>("Cover")
                        .HasColumnType("text")
                        .HasColumnName("cover");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<long>("LikeCnt")
                        .HasColumnType("bigint")
                        .HasColumnName("like_cnt");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.ToTable("get_posts_likes_comments");
                });

            modelBuilder.Entity("Infrastructure.Models.PostsLikesCommentsFilteredByCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<long>("CommentCnt")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_cnt");

                    b.Property<string>("Cover")
                        .HasColumnType("text")
                        .HasColumnName("cover");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<long>("LikeCnt")
                        .HasColumnType("bigint")
                        .HasColumnName("like_cnt");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.ToTable("get_posts_likes_comments_filtered_by_category");
                });

            modelBuilder.Entity("Infrastructure.Models.StaticLikePostLikes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Cover")
                        .HasColumnType("text")
                        .HasColumnName("cover");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<long>("LikeCnt")
                        .HasColumnType("bigint")
                        .HasColumnName("like_cnt");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.ToTable("get_static_like_post_likes");
                });

            modelBuilder.Entity("Infrastructure.Models.StaticLikePostLikesHasLiked", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Cover")
                        .HasColumnType("text")
                        .HasColumnName("cover");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<bool>("HasLiked")
                        .HasColumnType("boolean")
                        .HasColumnName("has_liked");

                    b.Property<long>("LikeCnt")
                        .HasColumnType("bigint")
                        .HasColumnName("like_cnt");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.ToTable("get_static_like_post_likes_has_liked");
                });

            modelBuilder.Entity("AccountAccountRole", b =>
                {
                    b.HasOne("Infrastructur.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructur.Models.AccountRole", null)
                        .WithMany()
                        .HasForeignKey("AccountRolesAccountId", "AccountRolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountRoleRole", b =>
                {
                    b.HasOne("Infrastructur.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructur.Models.AccountRole", null)
                        .WithMany()
                        .HasForeignKey("AccountRolesAccountId", "AccountRolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HashtagPost", b =>
                {
                    b.HasOne("Infrastructur.Models.Hashtag", null)
                        .WithMany()
                        .HasForeignKey("HashtagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructur.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructur.Models.Category", b =>
                {
                    b.HasOne("Infrastructur.Models.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Infrastructur.Models.Comment", b =>
                {
                    b.HasOne("Infrastructur.Models.Account", "Account")
                        .WithMany("Comments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructur.Models.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("Infrastructur.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ParentComment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Infrastructur.Models.ExternalAuthentication", b =>
                {
                    b.HasOne("Infrastructur.Models.Account", "Account")
                        .WithMany("ExternalAuthentications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructur.Models.ExternalLoginProvider", "Provider")
                        .WithMany("ExternalAuthentications")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Infrastructur.Models.LikedComment", b =>
                {
                    b.HasOne("Infrastructur.Models.Account", "Account")
                        .WithMany("LikedComments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructur.Models.Comment", "Comment")
                        .WithMany("LikedComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Infrastructur.Models.LikedPost", b =>
                {
                    b.HasOne("Infrastructur.Models.Account", "Account")
                        .WithMany("LikedPosts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructur.Models.Post", "Post")
                        .WithMany("LikedPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Infrastructur.Models.Post", b =>
                {
                    b.HasOne("Infrastructur.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Infrastructur.Models.Account", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ExternalAuthentications");

                    b.Navigation("LikedComments");

                    b.Navigation("LikedPosts");
                });

            modelBuilder.Entity("Infrastructur.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Infrastructur.Models.Comment", b =>
                {
                    b.Navigation("LikedComments");
                });

            modelBuilder.Entity("Infrastructur.Models.ExternalLoginProvider", b =>
                {
                    b.Navigation("ExternalAuthentications");
                });

            modelBuilder.Entity("Infrastructur.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LikedPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
